The mechanism for file I/O provided by the Unix operating system and its descendants, such as Linux, is a beautiful example of a deep interface. There are only five basic system calls for I/O, with simple signatures:

1. int open(const char* path, int flags, mode_t permissions);
2. ssize_t read(int fd, void* buffer, size_t count);
3. ssize_t write(int fd, const void* buffer, size_t count);
4. off_t lseek(int fd, off_t offset, int referencePosition);
5. int close(int fd);

The open system call takes a hierarchical file name such as /a/b/c and returns an integer file descriptor, which is used to reference the open file. The other arguments for open provide optional information such as whether the file is being opened for reading or writing, whether a new file should be created if there is no existing file, and access permissions for the file, if a new file is created. The read and write system calls transfer information between buffer areas in the application's memory and the file; close ends the access to the file. Most files are accessed sequentially, so that is the default; however, random access can be achieved by invoking the lseek system call to change the current access position.

A modern implementation of the Unix I/O interface requires hundreds of thousands of lines of code, which address complex issues such as:

- How are files represented on disk in order to allow efficient access?
- How are directories stored, and how are hierarchical path names processed to find the files they refer to?
- How are permissions enforced, so that one user cannot modify or delete another user's files?
- How are file accesses implemented? For example, how is functionality divided between interrupt handlers and background code, and how do these two elements communicate safely?
- What scheduling policies are used when there are concurrent accesses to multiple files?
- How can recently accessed file data be cached in memory in order to reduce the number of disk accesses?
- How can a variety of different secondary storage devices, such as disks and flash drives, be incorporated into a single file system?

All of these issues, and many more, are handled by the Unix file system implementation; they are invisible to programmers who invoke the system calls. Implementations of the Unix I/O interface have evolved radically over the years, but the five basic kernel calls have not changed.

- John Ousterhout, A Philosophy of Software Design

For most surfers, I think-for me, certainly-waves have a spooky duality. When you are absorbed in surfing them, they seem alive. They each have personalities, distinct and intricate, and quickly changing moods, to which you must react in the most intuitive, almost intimate way-too many people have likened riding waves to making love. And yet waves are of course not alive, not sentient, and the lover you reach to embrace may turn murderous without warning. It's nothing personal. That self-disemboweling death wave on the inside bar is not bloody-minded. Thinking so is just reflex anthropomorphism. Wave love is a one-way street.

Was the surf at Ocean Beach worth the travail of the paddle-out? On some days, certainly. But only for some people. It depended on your tolerance for punishment, the state of your nerves, your ability to read the bars, your ability to surf large waves, your paddling strength, your luck on the day. There might be beautiful waves-big, bowling rights, long-walled lefts-but there were, I found, rarely consistent, well-defined peaks, making it difficult to know where to wait. If there were other people out, you could exchange surmises and lineup markers. As an Ocean Beach newcomer, I eagerly lapped up any tip. I had a ridiculous amount to learn. The camaraderie itself was a comfort. And yet I knew that, in bigger waves, safety in numbers, the "buddy system," was generally useless. In my experience at least, when things got heavy, there never seemed to be anybody around, let alone in a position to help. Particularly at a wide-open, poorly defined break like Ocean Beach, you were emphatically on your own if you got into trouble. And I hadn't even seen it big yet. In those first couple of months, the biggest day I surfed was what the locals might have called ten feet.

- William Finnegan, Barbarian Days